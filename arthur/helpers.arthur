alphabet = 'abcdefghijklmnopqrstuvwxyz'

exports.tab = def(scope):
	level = scope.getLevel() + scope.getTemp()
	out = ''
	while (0 < level):
		out = out + '\t'
		level--
	return out

exports.writeBlock = def(scope, block, iterator, defaults = []):
	out = ''
	noSemiColon = ['if', 'for', 'while', 'try', 'switch', 'comment']
	hasSemiNewline = /.*\;\n+$/
	hasSemi = /.*\;$/
	for (i in block as line):
		if (line.type != 'comment'):
			if (line typeof 'object' && line.type):
				str = line.write(scope)
				if (noSemiColon.indexOf(line.type) == -1):
					if (hasSemiNewline.test(str)):
						ending = ''
					elseif (hasSemi.test(str)):
						ending = '\n'
					else:
						ending = ';\n'
				else:
					ending = '\n'
			out = out + exports.tab(scope) + str + ending
			if (iterator?):
				iterator(str, ending)
	return out

exports.getNextIterator = def(scope, yy):
	test = 'i'
	while (scope.exists('_' + test) == true):
		arr = test.split('')
		for (i in arr):
			arr[i] = alphabet.indexOf(arr[i] + 1)
			if (arr[i] > 25):
				arr[i] = 0
				if (i == 0):
					arr.push(0)
			else:
				break
		for (i in arr):
			arr[i] = alphabet[arr[i]]
		test = arr.join('')
	return new yy.Id('_' + test)

exports.getNextLength = def(scope, yy):
	num = 1
	test = '_len'
	while(scope.exists(test) == true):
		test = '_len' + (num + 1)
	return new yy.Id(test)

exports.buildIterator = def(series, index, scope, yy):
	out = ''
	if (series instanceof Array):
		first = series[0]
		second = series[1]
		if (first.type == 'literal' && second.type == 'literal'):
			firstNum = Number(first.write(scope))
			secondNum = Number(second.write(scope))

			if (firstNum <= secondNum):
				comparator = '<='
				adjustment = '++'
			else:
				comparator = '>='
				adjustment = '--'

			i = index.write(scope)
			j = exports.getNextIterator(scope, yy)
			scope.useVar(j)
			j = j.write(scope)

			out = 'for ('
			out = out + i + ' = ' + j + ' = ' + first.write(scope) + '; '
			out = out + j + ' ' + comparator + ' ' + second.write(scope) + '; '
			out = out + j + ' = ' + i + adjustment + ') {\n'
		else:
			first = first.write(scope)
			second = second.write(scope)

			i = index.write(scope)
			j = exports.getNextIterator(scope, yy)
			scope.useVar(j)
			j = j.write(scope)

			out = out + 'for ('
			out = out + i + ' = ' + j + ' = ' + first + '; '
			out = out + first + ' <= ' + second + ' ? ' + j + ' <= ' + second + ' : ' + j + ' >= ' + second + '; '
			out = out + i + ' = ' + first + ' <= ' + second + ' ? ++' + j + ' : --' + j + ') {\n'
	else:
		i = index.write(scope)
		j = exports.getNextIterator(scope, yy)
		scope.useVar(j)
		j = j.write(scope)

		len = exports.getNextLength(scope, yy)
		scope.useVar(len)
		len = len.write(scope)

		out = out + 'for ('
		out = out + i + ' = ' + j + ' = 0, ' + len + ' = ' + series.write(scope) + '.length; '
		out = out + j + ' < ' + len + '; '
		out = out + i + ' = ++' + j + ') {\n'

	return out
