exports.Scope = def:
	scope = []
	temp = 0
	extensions = {}

	.printLocal = def:
		local = scope[scope.length - 1].vars
		if (local.length > 0):
			out = 'var '
			for (i in local as variable):
				if (i > 0):
					out = out + ', '
				if (variable typeof 'object'):
					out = out + variable[0] + variable[1]
				else:
					out = out + variable
			return out
		else:
			return ''

	.useVar = def(identifier):
		last = scope[scope.length - 1].uses
		for (i in last as variable):
			if (variable[1] != false && variable[1] == identifier):
				return
			if (variable[0] == identifier):
				return
		for (i in scope as variable):
			if (variable.vars.indexOf(identifier) != -1):
				return
		scope[scope.length - 1].vars.push(identifier)

	.use = def(string, alias = false):
		last = scope[scope.length - 1].uses
		for (i in last as used):
			if (used[0] == string):
				return
		last.push([string, alias])

	.printUses = def(aliases = false):
		last = scope[scope.length - 1].uses
		out = ''
		if (last.length > 0):
			for (i in last as used):
				if (i > 0):
					out = out + ', '
				if (aliases && used[1]):
					out = out + used[1]
				else:
					out = out + used[0]
			if (aliases == false):
				out = ', [' + out + ']'
		return out

	.exists = def(identifier):
		if (identifier !typeof 'string'):
			identifier = identifier.write(scope)
		for (i in scope as level):
			if (level.vars.indexOf(identifier) != -1):
				return true
		return false

	.indent = def(opts = {}):
		scope.push({
			class = false
			vars = []
			uses = []
		})

	.dedent = def:
		scope.pop()

	.indentTemp = def:
		temp++

	.dedentTemp = def:
		temp--

	.getTemp = def:
		return temp

	.getLevel = def:
		return scope.length