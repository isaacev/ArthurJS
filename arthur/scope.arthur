exports.Scope = def:
	scope = []
	temp = 0

	.printLocal = def:
		local = scope[scope.length - 1].vars
		if (local.length > 0):
			out = 'var '
			for (i in local as variable):
				if (i > 0):
					out = out + ', '
				if (variable typeof 'object'):
					out = out + variable[0] + variable[1]
				else:
					out = out + variable
			return out
		else:
			return ''

	.useVar = def(identifier):
		# convert identifier to string
		if (identifier !typeof 'string'):
			identifier = identifier.write(this)

		for (i in scope as variable):
			if (variable.vars.indexOf(identifier) != -1):
				return

		# declare variable
		.declareVar(identifier)

	.declareVar = def (identifier):
		#convert identifier to string
		if (identifier !typeof 'string'):
			identifier = identifier.write(this)

		scope[scope.length - 1].vars.push(identifier)

	.exists = def(identifier):
		if (identifier !typeof 'string'):
			identifier = identifier.write(this)
		for (i in scope as level):
			if (level.vars.indexOf(identifier) != -1):
				return true
		return false

	.indent = def(opts = {}):
		scope.push({
			vars = []
		})

	.dedent = def:
		scope.pop()

	.indentTemp = def:
		temp++

	.dedentTemp = def:
		temp--

	.getTemp = def:
		return temp

	.getLevel = def:
		return scope.length