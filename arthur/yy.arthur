Helpers = require('./helpers.js')
Scope = require('./scope.js').Scope

tab = Helpers.tab
writeBlock = Helpers.writeBlock
buildIterator = Helpers.buildIterator

exports.yy = {
	Root = def(lines):
		.type = 'root'
		.compile = def(opts = {}):
			out = ''
			scope = new Scope()

			scope.indent()
			if (opts.bare == true):
				scope.dedentTemp()

			out = out + writeBlock(scope, lines)

			variables = scope.printLocal()
			if (variables.length > 0):
				variables = tab(scope) + variables + ';\n'
			else:
				variables = ''

			if (opts.bare == true):
				scope.indentTemp()

			scope.dedent()

			if (opts.bare != true):
				out = '(function() {\n' + variables + out.replace(/\s+$/, '\n') + tab(scope) + '}).call(this);'
			else:
				out = variables + '\n' + out.replace(/s+$/, '')

			if (opts.header == true):
				out = '// Written by Arthur v0.1.0\n\n' + out

			return out

	Assignment = def(identifier, value):
		.type = 'assignment'
		.write = def(scope):
			if (identifier.write(scope).split('.').length == 1 && identifier.type == 'identifier'):
				scope.useVar(identifier)

			return identifier.write(scope) + ' = ' + value.write(scope)

	Def = def(args, block):
		.type = 'def'
		.write = def(scope, insulate = false):
			scope.indent()

			argString = ''
			defaults = []
			for (i in args as arg):
				scope.declareVar(arg, false)
				if ((args.length - 1) == i):
					ending = ''
				else:
					ending = ', '

				arg = arg.write(scope, defaults)
				defaults = arg[1]
				argString = argString + arg[0] + ending

			out = ''
			lines = 0
			increment = def:
				lines++
			out = out + writeBlock(scope, block, increment)

			variables = scope.printLocal()
			if (variables.length > 0):
				variables = tab(scope) + variables + ';\n\n'
			else:
				variables = ''

			defaultString = ''
			if (defaults.length > 0):
				for (i in defaults):
					defaultString = defaultString + tab(scope) + defaults[i][0] + '\n'

					scope.indentTemp()
					defaultString = defaultString + tab(scope) + defaults[i][0] + '\n'
					scope.dedentTemp()

					defaultString = defaultString + tab(scope) + defaults[i][2] + '\n'
				defaultString = defaultString + '\n'

			scope.dedent()
			out = out + tab(scope) + '}'

			if (lines == 0):
				out = 'function (' + argString + ') {}'

			out = 'function (' + argString + ') {\n' + variables + defaultString + out

			if (insulate == true):
				return '(' + out + ')'
			else:
				return out

	Return = def(expression):
		.type = 'return'
		.write = def(scope):
			if (expression?):
				return 'return ' + expression.write(scope) + ';\n'
			else:
				return 'return;'

	Break = def:
		.type = 'break'
		.write = def:
			return 'break;'

	Comment = def(raw):
		.type = 'comment'
		.write = def (scope):
			return '// ' + raw

	If = def(flag, exp, chunks):
		elseIfObjs = []
		elseObj = false

		.type = 'if'
		.write = def(scope):
			out = ''

			if (flag == 'true'):
				out = out + 'if (' + exp.write(scope) + ' === true) {\n'
			else:
				out = out + 'if (' + exp.write(scope) + ') {\n'

			scope.indentTemp()
			out = out + writeBlock(scope, chunks)
			scope.dedentTemp()

			out = out + tab(scope) + '}'

			for (i in elseIfObjs as current):
				if (current.flag == 'true'):
					out = out + ' else if (' + current.exp.write(scope) + ' === true) {\n'
				else:
					out = out + ' else if (' + current.exp.write(scope) + ') {\n'

				scope.indentTemp()
				out = out + writeBlock(scope, current.chunks)
				scope.dedentTemp()

				out = out + tab(scope) + '}'

			if (elseObj != false):
				out = out + ' else {\n'

				scope.indentTemp()
				out = out + writeBlock(scope, elseObj.chunks)
				scope.dedentTemp()

				out = out + tab(scope) + '}\n'

			return out

		.addElseIfs = def (elseIfs):
			elseIfObjs = elseIfs
			return this

		.addElse = def (chunks):
			elseObj = {
				chunks = chunks
			}
			return this

	Try = def (chunks):
		catchBlock = false
		finallyBlock = false

		.type = 'try'
		.write = def (scope):
			out = 'try {\n'
			scope.indentTemp()
			out = out + writeBlock(scope, chunks)
			scope.dedentTemp()
			out = out + tab(scope) + '}'

			if (catchBlock != false):
				out = out + ' catch (' + catchBlock.id.write(scope) + ') {\n'
				scope.declareVar(catchBlock.id, true)
				scope.indentTemp()
				out = out + writeBlock(scope, catchBlock.block)
				scope.dedentTemp()
				out = out + tab(scope) + '}'

			if (finallyBlock != false):
				out = out + ' finally {\n'
				scope.indentTemp()
				out = out + writeBlock(scope, finallyBlock)
				scope.dedentTemp()
				out = out + tab(scope) + '}'

			return out

		.addCatch = def (obj):
			catchBlock = obj
			return this

		.addFinally = def (block):
			finallyBlock = block
			return this

	For = def(identifier, iterable, alias, block):
		.type = 'for'
		.write = def(scope):
			scope.useVar(identifier)

			if (alias != false):
				scope.useVar(alias)

			out = ''
			out = out + buildIterator(iterable, identifier, scope, exports.yy)

			scope.indentTemp()
			if (alias != false):
				if (iterable instanceof Array):
					out = out + tab(scope) + alias.write(scope) + ' = ' + identifier.write(scope) + ';\n'
				else:
					out = out + tab(scope) + alias.write(scope) + ' = ' + iterable.write(scope) + '[' + identifier.write(scope) + '];\n'
			out = out + writeBlock(scope, block)
			scope.dedentTemp()
			return out + tab(scope) + '}'

	While = def(comparisons, block):
		.type = 'while'
		.write = def(scope):
			out = 'while (' + comparisons.write(scope) + ') {\n'

			scope.indentTemp()
			out = out + writeBlock(scope, block)
			scope.dedentTemp()

			return out + tab(scope) + '}'

	Switch = def(test, cases):
		.type = 'switch'
		.write = def (scope):
			out = ''
			if (test == false):
				out = 'switch (false) {\n'
			else:
				out = 'switch (' + test.write(scope) + ') {\n'

			scope.indentTemp()
			for (i in cases as current):
				out = out + tab(scope) + 'case ' + current.test.write(scope) + ':\n'
				scope.indentTemp()
				out = out + writeBlock(scope, current.chunks)
				scope.dedentTemp()
			scope.indentTemp()

			return out + tab(scope) + '}'

	Id = def(raw):
		.type = 'identifier'
		.write = def:
			return raw.toString()

	Comparison = def(a, relation, b):
		.type = 'comparison'
		.write = def(scope):
			out = ''

			if (relation == '?'):
				out = '(typeof ' + a.write(scope) + ' !== \'undefined\' && ' + a.write(scope) + ' !== null)'
			elseif (relation == 'typeof'):
				out = '(typeof ' + a.write(scope) + ' === ' + b.write(scope) + ')'
			elseif (relation == '!typeof'):
				out = '(typeof ' + a.write(scope) + ' !== ' + b.write(scope) + ')'
			elseif (relation == 'instanceof'):
				out = '(' + a.write(scope) + ' instanceof ' + b.write(scope) + ')'
			elseif (relation == '!instanceof'):
				out = '!(' + a.write(scope) + ' instanceof ' + b.write(scope) + ')'
			else:
				if (relation == '!='):
					relation = '!=='
				elseif (relation == '=='):
					relation = '==='

				#console.log(scope.scope)
				out = a.write(scope) + ' ' + relation + ' ' + b.write(scope)

			return out

	Parameter = def(identifier, defaultValue = false):
		.type = 'parameter'
		.write = def(scope, defaults = []):
			if (defaultValue != false):
				lines = [
					'if (' + identifier.write(scope) + ' === undefined || ' + identifier.write(scope) + ' === null) {'
					identifier.write(scope) + ' = ' + defaultValue.write(scope) + ';'
					'}'
				]
				defaults.push(lines)
			return [identifier.write(scope), defaults]

	Literal = def(type, raw):
		.type = 'literal'
		.write = def:
			if (type == 'string'):
				out = '\'' + raw + '\''
			elseif (type == 'number'):
				out = Number(raw).toString()
			elseif (type == 'boolean'):
				out = raw
			elseif (type == 'regex'):
				out = String(raw)

			return out

	Accessor = def(value, access):
		.type = 'accessor'
		.write = def(scope):
			if (access.type == 'index'):
				out = value.write(scope) + '[' + access.val.write(scope) + ']'
			elseif (access.type == 'prop'):
				out = value.write(scope) + '.' + access.val.write(scope)

			return out

	Call = def(value, args):
		callback = []

		.type = 'call'
		.write = def(scope):
			argString = ''
			for (i in args as arg):
				if ((args.length - 1) == i):
					ending = ''
				else:
					ending = ', '
				argString = argString + arg.write(scope) + ending

			if (callback.length > 0):
				for (i in callback as func):
					argString = argString + ', ' + func.write(scope)

			return value.write(scope) + '(' + argString + ')'

		.callback = def (funcs):
			callback = funcs
			return this

	Operation = def(relation, a, b):
		.type = 'operation'
		.write = def(scope):
			if (relation == '**'):
				out = 'Math.pow(' + a.write(scope) + ', ' + b.write(scope) + ')'
			elseif (relation == '++'):
				if (b == true):
					out = a.write(scope) + '++'
				else:
					out = '++' + a.write(scope)
			elseif (relation == '--'):
				if (b == true):
					out = a.write(scope) + '--'
				else:
					out = '--' + a.write(scope)
			elseif (relation == '?'):
				out = '(typeof ' + a.write(scope) + ' !== \'undefined\' && ' + a.write(scope) + ' !== null)'
			elseif (relation == 'new'):
				out = 'new ' + a.write(scope)
			else:
				out = a.write(scope) + ' ' + relation + ' ' + b.write(scope)

			return out

	Logic = def(relation, a, b):
		.type = 'logic'
		.write = def(scope):
			return a.write(scope) + ' ' + relation + ' ' + b.write(scope)

	Parenthetical = def(expression):
		.type = 'parenthetical'
		.write = def(scope):
			return '(' + expression.write(scope) + ')'

	Array = def(elements):
		pretty = true
		.type = 'array'
		.write = def(scope):
			scope.indentTemp()
			lines = 0

			if (pretty == true):
				out = '[\n'
			else:
				out = '['

			for (i in elements as element):
				if (element typeof 'object'):
					lines++

					if (pretty == true):
						if (i > 0):
							beginning = ',\n' + tab(scope)
						else:
							beginning = tab(scope)
					else:
						if (i > 0):
							beginning = ', ' + tab(scope)
						else:
							beginning = tab(scope)

					out = out + beginning + element.write(scope)

			scope.dedentTemp()

			if (lines == 0):
				return '[]'
			else:
				if (pretty == true):
					return out + '\n' + tab(scope) + ']'
				else:
					return out + ']'

	Object = def(properties):
		pretty = true
		.type = 'object'
		.write = def(scope):
			scope.indentTemp()
			lines = 0

			if (pretty == true):
				out = '{\n'
			else:
				out = '{'

			for (i in properties as property):
				if (property typeof 'object'):
					lines++

					if (pretty == true):
						if (i > 0):
							beginning = ',\n' + tab(scope)
						else:
							beginning = tab(scope)
					else:
						if (i > 0):
							beginning = ', '
						else:
							beginning = ''

					out = out + beginning + property.key.write(scope) + ': ' + property.val.write(scope)

			scope.dedentTemp()

			if (lines == 0):
				return '{}'
			else:
				if (pretty == true):
					return out + '\n' + tab(scope) + '}'
				else:
					return out + '}'
}